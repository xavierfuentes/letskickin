{% extends '@Layouts/default.html.twig' %}

{% block head_top %}
    {{ parent() }}

    <meta name="robots" content="noindex, nofollow">
{% endblock %}

{% block body_id %}pot-show{% endblock %}

{% block content %}
    {% if isAdmin %}
        {{ render(controller('ApplicationLetskickinCoreBundle:Pot:adminPot', {
            'pot_key': pot.potKey
        })) }}
    {% else %}
        {{ include(
            'ApplicationLetskickinFrontBundle:Pot:blocks/headerForParticipant.html.twig', {
            'pot': pot
        }) }}
    {% endif %}

    <section class="pot-participants">
        <div class="container">
            {% if not isAdmin %}
            <section class="new-participant-section">
                {{ include(
                'ApplicationLetskickinFrontBundle:Pot:blocks/newParticipant.html.twig', {
                    'form': participant_form,
                    'pot': pot
                }) }}
            </section>
            {% endif %}

            <section class="old-participants-section">
                {% for participant in pot.participants %}
                    {{ render(controller('ApplicationLetskickinCoreBundle:Pot:adminParticipant', {
                        'participant_key': participant.participantKey,
                        'admin_key': app.request.get('admin_key')
                    })) }}
                {% else %}
                    <article class="no-participants-yet">
                    {% if isAdmin %}
                        {{ 'show.no-participants.admin'|trans({ '%occasion%': pot.occasion }, "pot") }}
                    {% else %}
                        {{ 'show.no-participants.participant'|trans({ '%admin_name%': pot.adminName }, "pot") }}
                    {% endif %}
                    </article>
                {% endfor %}
            </section>
        </div>
    </section>



{% endblock %}

{% block foot_scripts %}
    {{ parent() }}

    <script>
        $(function() {
            {% if isAdmin %}
            adminPot.performBinding(new adminPot.CommunicationLayer(), "#pot-show");
            {% else %}
            showPot.performBinding(new showPot.CommunicationLayer(), "#pot-show");
            {% endif %}
        });
    </script>

    {#
    <script>

        function getParameterByName(name) {
            name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
            var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
                    results = regex.exec(location.search);
            return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
        }

        $(document).ready(function(){
            var  $form = $('#pot_form')
                 , admin_key = getParameterByName('admin_key');

            $( $form ).find('#editPotType_key').val(admin_key);
        });

        // Get the ul that holds the collection of guests
        var collectionHolder = $('.guests');

        // setup an "add a guest" link
        var $addParticipantLink = $('<a href="#" class="add_guest_link">Add a guest</a>');
        var $newLinkLi = $('<li></li>').append($addParticipantLink);

        jQuery(document).ready(function() {
            // add a delete link to all of the existing guest form li elements
            collectionHolder.find('li').each(function() {
                addParticipantFormDeleteLink($(this));
            });

            // add the "add a guest" anchor and li to the guests ul
            collectionHolder.append($newLinkLi);

            // count the current form inputs we have (e.g. 2), use that as the new
            // index when inserting a new item (e.g. 2)
            collectionHolder.data('index', collectionHolder.find(':input').length);

            $addParticipantLink.on('click', function(e) {
                // prevent the link from creating a "#" on the URL
                e.preventDefault();

                // add a new guest form (see next code block)
                addParticipantForm(collectionHolder, $newLinkLi);
            });
        });

        function addParticipantForm(collectionHolder, $newLinkLi) {
            // Get the data-prototype explained earlier
            var prototype = collectionHolder.data('prototype');

            // get the new index
            var index = collectionHolder.data('index');

            // Replace '__name__' in the prototype's HTML to
            // instead be a number based on how many items we have
            var newForm = prototype.replace(/__name__/g, index);

            // increase the index with one for the next item
            collectionHolder.data('index', index + 1);

            // Display the form in the page in an li, before the "Add a guest" link li
            var $newFormLi = $('<li></li>').append(newForm);
            $newLinkLi.before($newFormLi);

            // add a delete link to the new form
            addParticipantFormDeleteLink($newFormLi);
        }

        function addParticipantFormDeleteLink($guestFormLi) {
            var $removeFormA = $('<a href="#">delete this guest</a>');
            $guestFormLi.append($removeFormA);

            $removeFormA.on('click', function(e) {
                // prevent the link from creating a "#" on the URL
                e.preventDefault();

                // remove the li for the guest form
                $guestFormLi.remove();
            });
        }
    </script>#}
{% endblock %}